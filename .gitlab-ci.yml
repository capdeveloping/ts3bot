image: docker:latest

stages:
  - cleanup
  - build-jar
  - build-container
  - deploy
  - pre-push
  - push
  - update
  - remove

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - build/
    - .gradle/

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

cleanup:
  stage: cleanup
  script: docker image prune -f
  only:
    - /^update-/

build jar file:
  stage: build-jar
  image: gradle:7.1.1
  script:
    - gradle --build-cache buildjar
  except:
    - /^doku-/

create staging container:
  stage: build-container
  script:
    - export VERSION=$(grep -E "version " build.gradle | cut -d "'" -f2)
    - cp build/libs/ts3bot-$VERSION-all.jar docker/ts3bot.jar
    - cp -r webinterface/ docker/html
    - docker build docker -t ts3bot:test-$VERSION -t ts3bot:test
  only:
    - /^update-/

#update test bot:
#  image: tiangolo/docker-with-compose
#  stage: deploy
#  script:
#    - export VERSION=$(grep -E "version " build.gradle | cut -d "'" -f2)
#    - cd docker && apk add wget
#    - wget -O docker-compose.yml --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" $DOCKER_COMPOSE_TEST_FILE_URL
#    - docker-compose up -d
#  only:
#    - /^update-/

push to github repo:
  stage: push
  image: debian:stable-slim
  rules:
    - if: $AUTO_BUILD == "false" && $CI_COMMIT_BRANCH == "master"
  script:
    - apt update -y && apt install git -y
    - export UPDATE_GIT_URL="git remote set-url public-repo $GITHUB_URL"
    - export ADD_GIT_URL="git remote add public-repo $GITHUB_URL"
    - if [ `git remote | grep public-repo` == "public-repo" ]; then $UPDATE_GIT_URL; else $ADD_GIT_URL; fi
    - git push public-repo HEAD:master

clean up docker test images:
  # Official docker image.
  stage: pre-push
  script:
    - export VERSION=$(grep 'name="version"' code/templates/header.php | awk -F'"' '{print $4}')
    - docker image rm "ts3bot:test"
    - docker image rm "ts3bot:test-$VERSION"
  only:
    - master

push to docker hub:
  # Official docker image.
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - export VERSION=$(grep -E "version " build.gradle | cut -d "'" -f2)
    - cp build/libs/ts3bot-$VERSION-all.jar docker/ts3bot.jar
    - cp -r webinterface/ docker/html
    - docker build docker -t "$CI_REGISTRY_IMAGE:latest" -t "$CI_REGISTRY_IMAGE:$VERSION"
    - docker push "$CI_REGISTRY_IMAGE" --all-tags
    - docker image rm "$CI_REGISTRY_IMAGE:latest"
    - docker image rm "$CI_REGISTRY_IMAGE:$VERSION"
  only:
    - master

#update prod bot:
#  image: tiangolo/docker-with-compose
#  stage: update
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master"
#  script:
#    - export VERSION=$(grep -E "version " build.gradle | cut -d "'" -f2)
#    - cd docker && apk add wget
#    - wget -O docker-compose.yml --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" $DOCKER_COMPOSE_FILE_URL
#    - docker-compose up -d

#stop test bot:
#  image: tiangolo/docker-with-compose
#  stage: remove
#  rules:
#    - if: $AUTO_BUILD == "false" && $CI_COMMIT_BRANCH == "master"
#  script:
#    - export VERSION=$(grep -E "version " build.gradle | cut -d "'" -f2)
#    - cd docker && apk add wget
#    - wget -O docker-compose.yml --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" $DOCKER_COMPOSE_TEST_FILE_URL
#    - docker stop ts3bot-test
